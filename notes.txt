GOALS:
create a select statement that, after adding test results by an admin, it checks for all previous tests taken by the person that has taken said test by ID and by the competency name, and sees if its their best score, if it is then it will then check the "best score" box and then uncheck the previous "best score" box on the previous best scores box. If it isn't a better score then it will just do nothing

allow users to be able to login with their full_name and password or even their user_id and password

when users are added, add information to the user field that states which admin had entered that user



  PK: PRIMARY KEY. If more than one column in a table has a PK designation, then it is a compound primary key

  FK: 'FOREIGN KEY`. Follow the connecting lines to determine the foreign key table and field relationship
  
  NN: NOT NULL.
  
  U: UNIQUE
  
  D(<value>): DEFAULT <value>. This column should receive a default value (should look like 'D1')

  AI: Auto Increment

Users:
(need to be able to designate managers as admin and able to add or change data, do this through a log in)
  user_id [auto increment, make unique]
  name
  phone
  email [make email unique]
  password [Hashed and encrypted]
  user_type [manager or non manager]
  date_created
  hire_date
  active

Competencies:
(Competencies we want to track. Users need to be able to view their own info)
  competency_name
  date_created (date competency was addded)


Assessments: 
(linked to Competencies, as each Assessment relates to a single competency, but each competency may have several assessments)
  name [Unique] (name of assessment, like data structures competency measurement)
  date_created (date assessment was added to the database)


Assessment Results:
(Results of the tests or measurements for individualt users on specific dates. Users can take each assessment multiple times, so multiple assessment results per user, with each assessment result relating to a single user)
  user_id (user that took the assessment)
  assessment
  score (from 0-4)
  date_taken
  manager (admin, if any, that administered the test (can use user_id))
[users can retake competency assessments as many times as they would like, so they may have multiple assessment results for any assessment]

FEATURES
--------------------------                
Login and Logout. Keep track of user emails and passwords to allow for secure login, passwords need to be hashed. (can check for an email, then the emails matching password.)

two user types, user and manager (admin). A user is an individual that can only view their own competency and assessment data, ONLY able to edit their name and password.  (could have the starting screen be a login, then after login have a main menu with settings at the bottom. Can have a boolean variable that states if the user is or is not an admin, off by default. If true, have certain parts of the menu change when viewing users and their data.)

Managers should be able to: 
view all users in a list
search for users by first name or last name
view a report of all users and their competency levels for a given competency
view a competency level report for an individual user
view a list of assessments for a given user
[[[ some of these should could probably be done through an admin menu accessed from the main menu ]]]

Add:
	add a user
	add a new competency
	add a new assessment to a competency
	add an assessment result for a user for an assessment (this is 	like recording test results for a user)

Edit:
	edit a user's information
	edit a competency
	edit an assessment
	edit an assessment result

Delete
	delete an assessment result

Export reports to CSV:
	competency report by competency and users
	competency report for a single user

Import assessment results from CSV:
	Ability to import assessment results from a CSV file
		CSV file would contain colums 'user_id', 'assessment_id', 'score', 'date_taken'

Competecy details
--------------------------------------
Competency scale: 
0 - No competency - Needs Training and Direction
1 - Basic Competency - Needs Ongoing Support
2 - Intermediate Competency - Needs Occasional Support
3 - Advanced Competency - Completes Task Independently
4 - Expert Competency - Can Effectively pass on this knowledge and can initiate optimizations


Competency List:
	Computer Anatomy
	Data Types
	Variables
	Functions
	Boolean Logic
	Conditionals
	Loops
	Data Structures
	Lists
	Dictionaries
	Working with Files
	Exception Handling
	Quality Assurance (QA)
	Object-Oriented Programming
	Recursion
	Databases